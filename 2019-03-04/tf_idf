import math
import jieba.posseg as pseg
import codecs
from nltk.corpus import stopwords
from collections import Counter


stop_words = 'E:/demo/stop_words2.txt'
stopwords = codecs.open(stop_words,'r',encoding='gb18030').readlines()
stopwords = [ w.strip() for w in stopwords ]
#print(stopwords)

stop_flag = ['x', 'c', 'u','d', 'p', 't', 'uj', 'm', 'f', 'r']
#print(stop_flag)
def tokenization(filename):
    result = []
    with open(filename, 'r') as f:
        text = f.read()
        words = pseg.cut(text)
    for word, flag in words:
        word = word.lower()
        flag = flag.lower()
        if flag not in stop_flag and word not in stopwords:
            result.append(word)
    return result

filenames = ['E://demo/Brazil1.txt',
            'E://demo/Brazil2.txt',
             'E://demo/Nasa Mars.txt',
            'E://demo/Climate change-copy.txt',
            ]

countlist = []

#文章的提取出20个关键字
for filename in filenames:
    tokens = tokenization(filename)
    count = Counter(tokens)
    print (count.most_common(20))
    countlist.append(count)

def tf(word, count):
    return count[word] / sum(count.values())

def n_containing(word, count_list):
    return sum(1 for count in count_list if word in count)

def idf(word, count_list):
    return math.log(len(count_list) / (1 + n_containing(word, count_list)))

def tfidf(word, count, count_list):
    return tf(word, count) * idf(word, count_list)

matrixs = locals()
for i, count in enumerate(countlist):
    print("Top words in document {}".format(i + 1))
    scores = {word: tfidf(word, count, countlist) for word in count}
    sorted_words = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    matrixs['matrix' + str(i)] = []
    for word, score in sorted_words[:10]:
        print("\tWord: {}, TF-IDF: {}".format(word, round(score, 5)))
        matrixs['matrix' + str(i)] .append(word)

#for i, count in enumerate(countlist):
#    print(matrixs['matrix' + str(i)])

def repeat(cosine):  #去除重复元素
    #cosine = list(set(cosine))  set去重打乱了顺序，虽然不影响结果，但不好观察结果
    cosine2 = []   #达到去重效果，且没改变顺序，方便观察结果
    for item in cosine:
        if item not in cosine2:
            cosine2.append(item)
    return cosine2

cosine = []
for item in matrixs['matrix0']:
    cosine.append(item)
for item in matrixs['matrix1']:
    cosine.append(item)
#print(cosine)
cosine = repeat(cosine)
print(cosine)


def conversion(cosine,matrixs):  #生成词频向量
    vectors = []
    for item in cosine:
        if item in matrixs:
            vectors.append(1)
        else:
            vectors.append(0)
    return vectors

vector1 = conversion(cosine,matrixs['matrix0'])
print(vector1)
vector2 = conversion(cosine,matrixs['matrix1'])
print(vector2)

#计算余弦相似度
def cosine_similarity(vector1, vector2):
    dot_product = 0.0
    normA = 0.0
    normB = 0.0
    for a, b in zip(vector1, vector2):
        dot_product += a * b
        normA += a ** 2
        normB += b ** 2
    if normA == 0.0 or normB == 0.0:
        return 0
    else:
        return round(dot_product / ((normA**0.5)*(normB**0.5)), 5)

print(cosine_similarity(vector1,vector2))






